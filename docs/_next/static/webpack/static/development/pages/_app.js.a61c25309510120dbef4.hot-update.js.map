{"version":3,"file":"static/webpack/static/development/pages/_app.js.a61c25309510120dbef4.hot-update.js","sources":["webpack:///./lib/init-apollo.js","webpack:///./lib/with-apollo-client.js"],"sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { RestLink } from \"apollo-link-rest\";\n\nimport fetch from \"isomorphic-unfetch\";\nimport headers from \"fetch-headers\";\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n  global.Headers = headers;\n  global.Headers.prototype.forEach = function(fn) {\n    for (let [key, value] of this.entries()) {\n      fn(value, key, this);\n    }\n  };\n}\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new RestLink({\n      uri: \"https://uinames.com/api/\"\n    }),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n","import React from \"react\";\nimport initApollo from \"./init-apollo\";\nimport Head from \"next/head\";\nimport { getDataFromTree } from \"react-apollo\";\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = \"withApollo(App)\";\n    static async getInitialProps(ctx) {\n      const { Component, router } = ctx;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo();\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getDataFromTree`\", error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA,aAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAOA;AACA;AARA;AAUA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAmBA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AAlCA;AAoCA;AACA;AArCA;AAyCA;AAzCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AA4CA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;AAjDA;AAAA;AAAA;AAmDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApDA;AACA;AADA;AAAA;AAsDA;;;;A","sourceRoot":""}